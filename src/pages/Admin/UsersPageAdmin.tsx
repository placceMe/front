// src/pages/admin/UsersPage.tsx
import React, { useEffect, useState } from "react";
import {
  Table,
  Button,
  Popconfirm,
  Modal,
  Form,
  Input,
  message,
  Tag,
  Select,
  Space,
  Tooltip,
} from "antd";

type User = {
  id: string;
  name: string;
  surname: string;
  email: string;
  phone: string | null;
  roles: string[];
  state: string;
  createdAt: string;
  avatarUrl?: string | null;
};

const API_URL = "http://localhost:8080/api/users";

// –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã —Å backend-–º–æ–¥–µ–ª—è–º–∏)
const ROLE_OPTIONS = ["Admin", "User", "Saler", "Moderator"] as const;
const STATE_OPTIONS = ["Active", "Inactive", "Blocked", "Deleted"] as const;

const roleColor = (r: string) =>
  r === "Admin" ? "red" : r === "Moderator" ? "geekblue" : r === "Saler" ? "green" : "blue";
const stateColor = (s: string) =>
  s === "Active" ? "green" : s === "Inactive" ? "default" : s === "Blocked" ? "orange" : "volcano";

// –ø—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π
const generatePassword = (len = 12) => {
  const lowers = "abcdefghijklmnopqrstuvwxyz";
  const uppers = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  const nums = "0123456789";
  const syms = "!@#$%^&*()_+-=[]{},.<>?";
  const all = lowers + uppers + nums + syms;

  const pick = (charset: string) => charset[Math.floor(Math.random() * charset.length)];
  // –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  let pwd = pick(lowers) + pick(uppers) + pick(nums) + pick(syms);
  for (let i = pwd.length; i < len; i++) pwd += pick(all);
  // –ø–µ—Ä–µ–º–µ—à–∞–µ–º
  return pwd.split("").sort(() => Math.random() - 0.5).join("");
};

const UsersPage: React.FC = () => {
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingUser, setEditingUser] = useState<User | null>(null);
  const [form] = Form.useForm();

  // –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const fetchUsers = async () => {
    setLoading(true);
    console.log("üì• [fetchUsers] start");
    try {
      const res = await fetch(API_URL);
      const data = (await res.json()) as User[];
      console.log("‚úÖ [fetchUsers] success:", data);
      setUsers(data);
    } catch (err) {
      console.error("‚ùå [fetchUsers] error:", err);
      message.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  // —É–¥–∞–ª–µ–Ω–∏–µ
  const handleDelete = async (id: string) => {
    console.log("üóë [deleteUser] try delete:", id);
    try {
      const res = await fetch(`${API_URL}/${id}`, { method: "DELETE" });
      if (res.ok) {
        console.log("‚úÖ [deleteUser] success:", id);
        message.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω");
        fetchUsers();
      } else {
        console.warn("‚ö†Ô∏è [deleteUser] failed:", res.status);
        message.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å");
      }
    } catch (err) {
      console.error("‚ùå [deleteUser] error:", err);
      message.error("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
    }
  };

  // –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É
  const openModal = (user?: User) => {
    setEditingUser(user || null);
    form.setFieldsValue(
      user || {
        name: "",
        surname: "",
        email: "",
        phone: "",
        roles: ["User"], // –¥–µ—Ñ–æ–ª—Ç
        state: "Active",
        password: "",
        confirmPassword: "",
      }
    );
    setIsModalOpen(true);
    console.log("üìÇ [modal] open", user ? { mode: "edit", user } : { mode: "create" });
  };

  const closeModal = () => {
    setIsModalOpen(false);
    form.resetFields();
    setEditingUser(null);
    console.log("üìÇ [modal] close");
  };

  // —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ä–æ–ª–∏/—Å—Ç–∞—Ç—É—Å—ã
  const sanitizeRoles = (roles: string[]) =>
    Array.from(new Set(roles)).filter((r) => ROLE_OPTIONS.includes(r as any));
  const sanitizeState = (state: string) =>
    STATE_OPTIONS.includes(state as any) ? state : "Active";

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      message.success("–ü–∞—Ä–æ–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞");
    } catch {
      message.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å");
    }
  };

  // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å (POST –∏–ª–∏ PUT)
  const handleSave = async () => {
    try {
      const raw = await form.validateFields();
      const payload: any = {
        name: raw.name,
        surname: raw.surname,
        email: raw.email,
        phone: raw.phone || null,
        roles: sanitizeRoles(raw.roles || []),
        state: sanitizeState(raw.state),
      };

      // —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
      if (!editingUser) {
        payload.password = raw.password;
      }

      console.log("üíæ [saveUser] payload:", { ...payload, password: payload.password ? "***" : undefined });

      if (editingUser) {
        // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        const res = await fetch(`${API_URL}/${editingUser.id}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ ...editingUser, ...payload }),
        });
        if (res.ok) {
          console.log("‚úÖ [updateUser] success:", editingUser.id);
          message.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω");
        } else {
          console.warn("‚ö†Ô∏è [updateUser] failed:", res.status);
          message.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏");
        }
      } else {
        // —Å–æ–∑–¥–∞–Ω–∏–µ (+ –ø–∞—Ä–æ–ª—å)
        const res = await fetch(API_URL, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload),
        });
        if (res.ok) {
          console.log("‚úÖ [createUser] success");
          message.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω");
        } else {
          console.warn("‚ö†Ô∏è [createUser] failed:", res.status);
          message.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏");
        }
      }

      closeModal();
      fetchUsers();
    } catch (err: any) {
      if (err?.errorFields) {
        console.warn("‚ö†Ô∏è [formValidation] failed:", err.errorFields);
      } else {
        console.error("‚ùå [saveUser] error:", err);
        message.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏");
      }
    }
  };

  return (
    <div>
      <h2 style={{ marginBottom: 16 }}>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h2>

      <Button type="primary" onClick={() => openModal()} style={{ marginBottom: 16 }}>
        –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      </Button>

      <Table<User>
        rowKey="id"
        dataSource={users}
        loading={loading}
        columns={[
          { title: "–ò–º—è", dataIndex: "name" },
          { title: "–§–∞–º–∏–ª–∏—è", dataIndex: "surname" },
          { title: "Email", dataIndex: "email" },
          { title: "–¢–µ–ª–µ—Ñ–æ–Ω", dataIndex: "phone" },
          {
            title: "–†–æ–ª–∏",
            dataIndex: "roles",
            render: (roles: string[]) =>
              roles?.map((role) => (
                <Tag color={roleColor(role)} key={role}>
                  {role}
                </Tag>
              )),
          },
          {
            title: "–°—Ç–∞—Ç—É—Å",
            dataIndex: "state",
            render: (state: string) => <Tag color={stateColor(state)}>{state}</Tag>,
          },
          {
            title: "–î–µ–π—Å—Ç–≤–∏—è",
            render: (_, record) => (
              <>
                <Button type="link" onClick={() => openModal(record)}>
                  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </Button>
                <Popconfirm
                  title="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?"
                  onConfirm={() => handleDelete(record.id)}
                >
                  <Button danger type="link">
                    –£–¥–∞–ª–∏—Ç—å
                  </Button>
                </Popconfirm>
              </>
            ),
          },
        ]}
      />

      <Modal
        open={isModalOpen}
        title={editingUser ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" : "–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}
        onCancel={closeModal}
        onOk={handleSave}
      >
        <Form
          form={form}
          layout="vertical"
          onValuesChange={(_, all) => console.log("‚úèÔ∏è [form] change:", all)}
        >
          <Form.Item name="name" label="–ò–º—è" rules={[{ required: true }]}>
            <Input />
          </Form.Item>
          <Form.Item name="surname" label="–§–∞–º–∏–ª–∏—è" rules={[{ required: true }]}>
            <Input />
          </Form.Item>
          <Form.Item
            name="email"
            label="Email"
            rules={[{ required: true, type: "email" }]}
          >
            <Input />
          </Form.Item>
          <Form.Item name="phone" label="–¢–µ–ª–µ—Ñ–æ–Ω">
            <Input />
          </Form.Item>

          <Form.Item
            name="roles"
            label="–†–æ–ª–∏"
            rules={[{ required: true, message: "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–æ–ª—å" }]}
          >
            <Select
              mode="multiple"
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª–∏"
              options={ROLE_OPTIONS.map((r) => ({ label: r, value: r }))}
              filterOption={(input, option) =>
                (option?.label as string).toLowerCase().includes(input.toLowerCase())
              }
            />
          </Form.Item>

          <Form.Item
            name="state"
            label="–°—Ç–∞—Ç—É—Å"
            rules={[{ required: true, message: "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å" }]}
          >
            <Select
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å"
              options={STATE_OPTIONS.map((s) => ({ label: s, value: s }))}
            />
          </Form.Item>

          {/* –ü–∞—Ä–æ–ª—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ */}
          {!editingUser && (
            <>
              <Form.Item
                name="password"
                label="–ü–∞—Ä–æ–ª—å"
                rules={[
                  { required: true, message: "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" },
                  { min: 8, message: "–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤" },
                  {
                    pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$/,
                    message: "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–µ, –ø—Ä–æ–ø–∏—Å–Ω—ã–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã",
                  },
                ]}
              >
                <Input.Password
                  placeholder="–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å"
                  addonAfter={
                    <Space size={4}>
                      <Tooltip title="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å">
                        <Button
                          size="small"
                          type="link"
                          onClick={() => {
                            const p = generatePassword(12);
                            form.setFieldsValue({ password: p, confirmPassword: p });
                            message.success("–ü–∞—Ä–æ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω");
                          }}
                        >
                          –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
                        </Button>
                      </Tooltip>
                      <Tooltip title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å">
                        <Button
                          size="small"
                          type="link"
                          onClick={() => {
                            const p = form.getFieldValue("password");
                            if (p) copyToClipboard(p);
                          }}
                        >
                          –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                        </Button>
                      </Tooltip>
                    </Space>
                  }
                />
              </Form.Item>

              <Form.Item
                name="confirmPassword"
                label="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                dependencies={["password"]}
                rules={[
                  { required: true, message: "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å" },
                  ({ getFieldValue }) => ({
                    validator(_, value) {
                      if (!value || getFieldValue("password") === value) {
                        return Promise.resolve();
                      }
                      return Promise.reject(new Error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"));
                    },
                  }),
                ]}
              >
                <Input.Password placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å" />
              </Form.Item>
            </>
          )}
        </Form>
      </Modal>
    </div>
  );
};

export default UsersPage;
