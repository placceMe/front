// src/layouts/AdminLayout.tsx
import React, { useMemo, useState } from "react";
import { Layout, Menu, Tabs } from "antd";
import type { MenuProps } from "antd";
import { Outlet, useLocation, useNavigate } from "react-router-dom";
import {
  UserOutlined,
  ShoppingOutlined,
  AppstoreOutlined,
  TagsOutlined,
  ShoppingCartOutlined,
  AuditOutlined,
  MessageOutlined
} from "@ant-design/icons"

const { Header, Sider, Content } = Layout;

type SectionKey = "administrator" | "moderator";

// –£–°–Ü –ø–æ—Ç–æ—á–Ω—ñ –ø—É–Ω–∫—Ç–∏ ‚Äî —É –≤–∫–ª–∞–¥—Ü—ñ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
const ADMINISTRATOR_ITEMS: Required<MenuProps>["items"] = [
  { key: "users", label: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", icon: <UserOutlined /> },             // üë§ –ª–æ–≥—ñ—á–Ω–æ
  { key: "products", label: "–¢–æ–≤–∞—Ä–∏", icon: <ShoppingOutlined /> },           // üõçÔ∏è —Ç–æ–≤–∞—Ä–∏
  { key: "categories", label: "–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó", icon: <AppstoreOutlined /> },      // üóÇÔ∏è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
  { key: "characteristics", label: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", icon: <TagsOutlined /> },// üè∑Ô∏è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  { key: "orders", label: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è", icon: <ShoppingCartOutlined /> },     // üõí –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
];

// –í–∫–ª–∞–¥–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ ‚Äî –Ω–µ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞ (disabled placeholder)
const MODERATOR_ITEMS: Required<MenuProps>["items"] = [
  { key: "productsmoder",  label: "–¢–æ–≤–∞—Ä–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó",   icon: <AuditOutlined /> },
  { key: "feedbacksmoder", label: "–í—ñ–¥–≥—É–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó",  icon: <MessageOutlined /> },
];

const ALL_SECTIONS: Record<SectionKey, Required<MenuProps>["items"]> = {
  administrator: ADMINISTRATOR_ITEMS,
  moderator: MODERATOR_ITEMS,
};

const sectionByRouteKey = (routeKey: string): SectionKey => {
  if (ADMINISTRATOR_ITEMS.some(i => i?.key === routeKey)) return "administrator";
  if (MODERATOR_ITEMS.some(i => i?.key === routeKey)) return "moderator";
  return "administrator";
};

const AdminLayout: React.FC = () => {
  const { pathname } = useLocation();
  const navigate = useNavigate();

  // –ø–æ—Ç–æ—á–Ω–∏–π –ø—É–Ω–∫—Ç –∑ URL (/admin/<key>)
  const selectedKey = pathname.split("/")[2] || "categories";

  // –∞–∫—Ç–∏–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –∑–∞ —Ä–æ—É—Ç–æ–º, –∞–ª–µ –º—ñ–Ω—è—Ç–∏ —Å–∞–º —Ä–æ—É—Ç –ø—Ä–∏ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—ñ –≤–∫–ª–∞–¥–æ–∫ –Ω–µ –±—É–¥–µ–º–æ
  const [section, setSection] = useState<SectionKey>(sectionByRouteKey(selectedKey));

  const items = useMemo(() => ALL_SECTIONS[section], [section]);

  // –ü—ñ–¥—Å–≤—ñ—Ç–∫—É –ø—É–Ω–∫—Ç—É –¥–∞—î–º–æ –ª–∏—à–µ —è–∫—â–æ –≤—ñ–Ω —î –≤ –ø–æ—Ç–æ—á–Ω—ñ–π –≤–∫–ª–∞–¥—Ü—ñ (—â–æ–± –Ω–µ –±—É–ª–æ ¬´–Ω–µ —Ç–æ–≥–æ¬ª —Ö–∞–π–ª–∞–π—Ç–∞)
  const keysInSection = (items || []).map(i => i!.key as string);
  const selectedKeys = keysInSection.includes(selectedKey) ? [selectedKey] : [];

  return (
    <Layout style={{ minHeight: "100vh" }}>
      <Sider width={260} collapsible>
        <div style={{ color: "white", padding: 16, fontWeight: "bold" }}>–ê–¥–º—ñ–Ω –ü–∞–Ω–µ–ª—å</div>

        {/* –î–≤—ñ –≤–∫–ª–∞–¥–∫–∏ –∑–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑—É—é—Ç—å—Å—è. –í–∏–º–∏–∫–∞—î–º–æ —Ç—Ä–∏–∫—Ä–∞–ø–∫—É (moreIcon) –Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫. */}
        <Tabs
          activeKey={section}
          onChange={(k) => setSection(k as SectionKey)}
          items={[
            { key: "administrator", label: "–ê–¥–º—ñ–Ω" },
            { key: "moderator", label: "–ú–æ–¥–µ—Ä" },
          ]}
          moreIcon={null}
        />

        <Menu
          theme="dark"
          mode="inline"
          selectedKeys={selectedKeys}
          onClick={(info) => navigate(`/admin/${info.key}`)}
          items={items}
          style={{ borderRight: 0 }}
        />
      </Sider>

      <Layout>
        <Header style={{ background: "#fff", paddingLeft: 16 }}>
          –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚Äî {section === "administrator" ? "–ê–¥–º—ñ–Ω" : "–ú–æ–¥–µ—Ä"}
        </Header>
        <Content style={{ margin: 16, padding: 24, background: "#fff" }}>
          <Outlet />
        </Content>
      </Layout>
    </Layout>
  );
};

export default AdminLayout;
