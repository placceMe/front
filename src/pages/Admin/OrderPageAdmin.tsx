// src/pages/admin/ProductsPage.tsx
import React, { useEffect, useMemo, useState } from "react";
import {
  Table, Button, Popconfirm, Modal, Form, Input, InputNumber, message, Space, Tag, Upload, Switch, Select,
} from "antd";
import type { UploadFile } from "antd/es/upload/interface";
import { SearchOutlined, InboxOutlined, ReloadOutlined, UserSwitchOutlined } from "@ant-design/icons";

type Product = {
  id: string;
  title: string;
  description?: string;
  price: number;
  color?: string;
  weight?: number;
  mainImageUrl?: string;
  categoryId: string;
  sellerId?: string;
  quantity: number;
};

type ProductsResponse = {
  products: Product[];
  pagination: {
    totalItems: number;
    pageSize: number;
    currentPage: number;
    totalPages: number;
  };
};

type Category = {
  id: string;
  title?: string;
  name?: string;
};

type SellerUser = {
  id: string;
  name: string;
  surname: string;
  email: string;
  roles: string[];
  state: string;
};

const API_PRODUCTS = "http://localhost:8080/api/products";
const API_CATEGORIES = "http://localhost:8080/api/category";
const API_USERS = "http://localhost:8080/api/users";

/* --------------------  –£—Ç–∏–ª–∏—Ç—ã —Ü–≤–µ—Ç–∞  -------------------- */
const hashCode = (str: string) => {
  let h = 0;
  for (let i = 0; i < str.length; i++) {
    h = (h << 5) - h + str.charCodeAt(i);
    h |= 0;
  }
  return Math.abs(h);
};
const hslToRgb = (h: number, s: number, l: number) => {
  s /= 100; l /= 100;
  const k = (n: number) => (n + h / 30) % 12;
  const a = s * Math.min(l, 1 - l);
  const f = (n: number) => l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));
  return [Math.round(255 * f(0)), Math.round(255 * f(8)), Math.round(255 * f(4))] as const;
};
const textColorForBg = (r: number, g: number, b: number) =>
  (r * 299 + g * 587 + b * 114) / 1000 >= 140 ? "#000" : "#fff";
const colorForCategory = (key: string) => {
  const h = hashCode(key) % 360;
  const s = 65;
  const l = 45;
  const [r, g, b] = hslToRgb(h, s, l);
  const bg = `hsl(${h}, ${s}%, ${l}%)`;
  const text = textColorForBg(r, g, b);
  return { bg, text };
};
/* -------------------------------------------------------- */

/* --------------------  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏  -------------------- */
const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
const isImage = (file: File) => file.type.startsWith("image/");
const beforeUploadValidate = (file: File) => {
  if (!isImage(file)) {
    message.error("–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
    return Upload.LIST_IGNORE;
  }
  if (file.size > MAX_FILE_SIZE) {
    message.error("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 5MB)");
    return Upload.LIST_IGNORE;
  }
  // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false, —á—Ç–æ–±—ã AntD –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Ñ–∞–π–ª —Å–∞–º (–º—ã —à–ª—ë–º –≤ onOk)
  return false;
};
/* ------------------------------------------------------------- */

const ProductsPage: React.FC = () => {
  const [data, setData] = useState<Product[]>([]);
  const [total, setTotal] = useState(0);
  const [loading, setLoading] = useState(false);

  const [categories, setCategories] = useState<Category[]>([]);
  const [catLoading, setCatLoading] = useState(false);

  const [sellers, setSellers] = useState<SellerUser[]>([]);
  const [sellersLoading, setSellersLoading] = useState(false);

  const [page, setPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);

  const [query, setQuery] = useState("");
  const debouncedQuery = useMemo(() => query, [query]);

  const [isOpen, setIsOpen] = useState(false);
  const [editing, setEditing] = useState<Product | null>(null);
  const [withFiles, setWithFiles] = useState(false);
  const [form] = Form.useForm();

  // üîÅ –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: –¥–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∫–∞ ‚Äî –≥–ª–∞–≤–Ω—ã–π –∏ –≥–∞–ª–µ—Ä–µ—è
  const [mainFileList, setMainFileList] = useState<UploadFile[]>([]);
  const [galleryFileList, setGalleryFileList] = useState<UploadFile[]>([]);

  const getSellerLabel = (id?: string) => {
    const u = sellers.find((x) => x.id === id);
    return u ? `${u.name} ${u.surname} (${u.email})` : id || "‚Äî";
  };

  const fetchCategories = async () => {
    setCatLoading(true);
    try {
      const res = await fetch(API_CATEGORIES);
      const list: Category[] = await res.json();
      setCategories(list);
    } catch (e) {
      message.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
    } finally {
      setCatLoading(false);
    }
  };

  const fetchSellers = async () => {
    setSellersLoading(true);
    try {
      const res = await fetch(API_USERS);
      const list: SellerUser[] = await res.json();
      const onlySellers = (list || []).filter(
        (u) => Array.isArray(u.roles) && u.roles.includes("Saler") && u.state === "Active"
      );
      setSellers(onlySellers);
    } catch (e) {
      message.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤");
    } finally {
      setSellersLoading(false);
    }
  };

  const syncPagination = (pg?: ProductsResponse["pagination"]) => {
    if (!pg) return;
    setTotal(pg.totalItems ?? 0);
    setPage((prev) => (pg.currentPage && pg.currentPage !== prev ? pg.currentPage : prev));
    setPageSize((prev) => (pg.pageSize && pg.pageSize !== prev ? pg.pageSize : prev));
  };

  const fetchPaged = async () => {
    setLoading(true);
    try {
      const offset = (page - 1) * pageSize;
      const res = await fetch(`${API_PRODUCTS}?offset=${offset}&limit=${pageSize}`);
      const dto: ProductsResponse | any = await res.json();
      const items: Product[] = Array.isArray(dto) ? dto : dto.products ?? [];
      setData(items);
      if (!Array.isArray(dto) && dto.pagination) {
        syncPagination(dto.pagination);
      } else {
        setTotal(items.length);
      }
    } catch (e) {
      message.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã");
    } finally {
      setLoading(false);
    }
  };

  const searchProducts = async () => {
    if (!debouncedQuery.trim()) {
      fetchPaged();
      return;
    }
    setLoading(true);
    try {
      const res = await fetch(`${API_PRODUCTS}/search?query=${encodeURIComponent(debouncedQuery)}`);
      const raw: any = await res.json();
      const items: Product[] = Array.isArray(raw)
        ? raw
        : Array.isArray(raw?.products)
        ? raw.products
        : [];
      const totalFromApi =
        !Array.isArray(raw) && raw?.pagination?.totalItems
          ? raw.pagination.totalItems
          : items.length;
      setData(items);
      setTotal(totalFromApi);
      if (!Array.isArray(raw) && raw?.pagination) {
        syncPagination(raw.pagination);
      }
    } catch (e) {
      message.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => { fetchCategories(); fetchSellers(); }, []);
  useEffect(() => { debouncedQuery.trim() ? searchProducts() : fetchPaged(); }, [page, pageSize, debouncedQuery]);

  const openModal = (record?: Product) => {
    setEditing(record || null);
    form.setFieldsValue(
      record || {
        title: "", description: "", price: 0, color: "", weight: 0,
        mainImageUrl: "", categoryId: undefined, sellerId: undefined, quantity: 0,
      }
    );
    setWithFiles(false);
    setMainFileList([]);
    setGalleryFileList([]);
    setIsOpen(true);
  };
  const closeModal = () => {
    setIsOpen(false);
    setEditing(null);
    setMainFileList([]);
    setGalleryFileList([]);
    form.resetFields();
  };

  const handleDelete = async (id: string) => {
    try {
      const res = await fetch(`${API_PRODUCTS}/${id}`, { method: "DELETE" });
      if (res.ok) {
        message.success("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω");
        fetchPaged();
      } else {
        message.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å");
      }
    } catch (e) {
      message.error("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
    }
  };

  const handleSave = async () => {
    try {
      const values = await form.validateFields();

      if (editing) {
        // UPDATE (PUT –±–µ–∑ —Ñ–∞–π–ª–æ–≤)
        const res = await fetch(`${API_PRODUCTS}/${editing.id}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            title: values.title,
            description: values.description,
            price: values.price,
            color: values.color,
            weight: values.weight,
            mainImageUrl: values.mainImageUrl,
            categoryId: values.categoryId,
            quantity: values.quantity,
          }),
        });
        if (res.ok) {
          message.success("–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω");
          closeModal();
          fetchPaged();
        } else {
          message.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏");
        }
        return;
      }

      // CREATE
      if (withFiles) {
        // ‚ö†Ô∏è –¢—Ä–µ–±—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const mainFile = mainFileList[0]?.originFileObj as File | undefined;
        if (!mainFile) {
          message.error("–î–æ–±–∞–≤—å—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
          return;
        }

        const fd = new FormData();
        fd.append("title", values.title);
        if (values.description) fd.append("description", values.description);
        fd.append("price", String(values.price ?? 0));
        if (values.color) fd.append("color", values.color);
        if (values.weight !== undefined) fd.append("weight", String(values.weight ?? 0));
        fd.append("categoryId", values.categoryId);
        if (values.sellerId) fd.append("sellerId", values.sellerId);
        fd.append("quantity", String(values.quantity ?? 0));

        // üñº –≥–ª–∞–≤–Ω–æ–µ + –≥–∞–ª–µ—Ä–µ—è
        fd.append("MainImage", mainFile);
        galleryFileList.forEach((f) => {
          const file = f.originFileObj as File;
          if (file) fd.append("AdditionalImages", file);
        });

        const res = await fetch(`${API_PRODUCTS}/with-files`, { method: "POST", body: fd });
        if (res.ok) {
          message.success("–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω (—Å —Ñ–∞–π–ª–∞–º–∏)");
          closeModal();
          fetchPaged();
        } else {
          message.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏");
        }
      } else {
        const res = await fetch(API_PRODUCTS, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            title: values.title,
            description: values.description,
            price: values.price,
            color: values.color,
            weight: values.weight,
            mainImageUrl: values.mainImageUrl,
            categoryId: values.categoryId,
            sellerId: values.sellerId,
            quantity: values.quantity,
          }),
        });
        if (res.ok) {
          message.success("–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω");
          closeModal();
          fetchPaged();
        } else {
          message.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏");
        }
      }
    } catch (err: any) {
      if (err?.errorFields) {
        // –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã
      } else {
        message.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏");
      }
    }
  };

  return (
    <div>
      <Space style={{ marginBottom: 16, flexWrap: "wrap" }}>
        <Input
          allowClear
          prefix={<SearchOutlined />}
          placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          style={{ width: 280 }}
        />
        <Button icon={<ReloadOutlined />} onClick={() => { setQuery(""); fetchPaged(); }}>
          –û–±–Ω–æ–≤–∏—Ç—å
        </Button>
        <Button type="primary" onClick={() => openModal()}>–°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä</Button>

        <Button size="small" loading={catLoading} onClick={fetchCategories}>
          –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        </Button>
        <Button size="small" icon={<UserSwitchOutlined />} loading={sellersLoading} onClick={fetchSellers}>
          –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
        </Button>
      </Space>

      <Table<Product>
        rowKey="id"
        dataSource={data}
        loading={loading}
        pagination={{
          current: page,
          pageSize,
          total,
          showSizeChanger: true,
          onChange: (p, s) => { setPage(p); setPageSize(s); },
        }}
        columns={[
          { title: "–ù–∞–∑–≤–∞–Ω–∏–µ", dataIndex: "title" },
          { title: "–¶–µ–Ω–∞", dataIndex: "price", render: (v: number) => `${v} ‚Ç¥` },
          { title: "–ö–æ–ª-–≤–æ", dataIndex: "quantity" },
          { title: "–¶–≤–µ—Ç", dataIndex: "color" },
          { title: "–í–µ—Å", dataIndex: "weight" },
          {
            title: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
            dataIndex: "categoryId",
            render: (id: string) => {
              const cat = categories.find((x) => x.id === id);
              const label = cat ? (cat.title ?? cat.name ?? "(–±–µ–∑ –Ω–∞–∑–≤–∏)") : id || "‚Äî";
              const { bg, text } = colorForCategory(cat ? `${cat.id}|${label}` : id || label);
              return (
                <Tag style={{ backgroundColor: bg, color: text, border: "none" }}>
                  {label}
                </Tag>
              );
            },
          },
          {
            title: "–ü—Ä–æ–¥–∞–≤–µ—Ü",
            dataIndex: "sellerId",
            render: (id?: string) => getSellerLabel(id),
          },
          {
            title: "–î–µ–π—Å—Ç–≤–∏—è",
            render: (_, r) => (
              <Space>
                <Button type="link" onClick={() => openModal(r)}>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</Button>
                <Popconfirm title="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä?" onConfirm={() => handleDelete(r.id)}>
                  <Button danger type="link">–£–¥–∞–ª–∏—Ç—å</Button>
                </Popconfirm>
              </Space>
            ),
          },
        ]}
      />

      <Modal
        open={isOpen}
        title={editing ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä" : "–°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä"}
        onCancel={closeModal}
        onOk={handleSave}
        width={760}
      >
        {!editing && (
          <Space style={{ marginBottom: 16, flexWrap: "wrap" }}>
            <span>–°–æ–∑–¥–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏</span>
            <Switch checked={withFiles} onChange={setWithFiles} />
            <Button size="small" loading={catLoading} onClick={fetchCategories}>
              –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            </Button>
            <Button size="small" icon={<UserSwitchOutlined />} loading={sellersLoading} onClick={fetchSellers}>
              –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
            </Button>
          </Space>
        )}

        <Form form={form} layout="vertical">
          <Form.Item name="title" label="–ù–∞–∑–≤–∞–Ω–∏–µ" rules={[{ required: true }]}>
            <Input />
          </Form.Item>

          <Form.Item name="description" label="–û–ø–∏—Å–∞–Ω–∏–µ">
            <Input.TextArea rows={3} />
          </Form.Item>

          <Space size="middle" style={{ display: "flex" }}>
            <Form.Item name="price" label="–¶–µ–Ω–∞" rules={[{ required: true }]}>
              <InputNumber min={0} style={{ width: "100%" }} />
            </Form.Item>
            <Form.Item name="quantity" label="–ö–æ–ª-–≤–æ" rules={[{ required: true }]}>
              <InputNumber min={0} style={{ width: "100%" }} />
            </Form.Item>
          </Space>

          <Space size="middle" style={{ display: "flex" }}>
            <Form.Item name="color" label="–¶–≤–µ—Ç"><Input /></Form.Item>
            <Form.Item name="weight" label="–í–µ—Å"><InputNumber min={0} style={{ width: "100%" }} /></Form.Item>
          </Space>

          {/* –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–µ–∑ —Ñ–∞–π–ª–æ–≤ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º URL */}
          {!withFiles && !editing && (
            <Form.Item name="mainImageUrl" label="–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (URL)">
              <Input placeholder="https://..." />
            </Form.Item>
          )}

          <Space size="middle" style={{ display: "flex" }}>
            <Form.Item
              name="categoryId"
              label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
              rules={[{ required: true, message: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é" }]}
              style={{ flex: 1 }}
            >
              <Select
                loading={catLoading}
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
                options={categories.map((c) => ({
                  value: c.id,
                  label: c.title ?? c.name ?? "(–±–µ–∑ –Ω–∞–∑–≤–∏)",
                }))}
                showSearch
                filterOption={(input, option) =>
                  (option?.label as string).toLowerCase().includes(input.toLowerCase())
                }
              />
            </Form.Item>

            <Form.Item name="sellerId" label="–ü—Ä–æ–¥–∞–≤–µ—Ü" style={{ flex: 1 }}>
              <Select
                allowClear
                loading={sellersLoading}
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ (–æ–ø—Ü.)"
                options={sellers.map((u) => ({
                  value: u.id,
                  label: `${u.name} ${u.surname} (${u.email})`,
                }))}
                showSearch
                filterOption={(input, option) =>
                  (option?.label as string).toLowerCase().includes(input.toLowerCase())
                }
              />
            </Form.Item>
          </Space>

          {/* üîÅ –ù–æ–≤—ã–π UI –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏ */}
          {!editing && withFiles && (
            <>
              <Form.Item
                label="–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                required
                validateStatus={mainFileList.length ? "success" : "error"}
                help={mainFileList.length ? undefined : "–î–æ–±–∞–≤—å—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"}
              >
                <Upload.Dragger
                  accept="image/*"
                  listType="picture-card"
                  maxCount={1}
                  fileList={mainFileList}
                  beforeUpload={beforeUploadValidate}
                  onChange={({ fileList }) => setMainFileList(fileList)}
                  onRemove={() => { setMainFileList([]); return true; }}
                >
                  <p className="ant-upload-drag-icon"><InboxOutlined /></p>
                  <p className="ant-upload-text">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ</p>
                </Upload.Dragger>
              </Form.Item>

              <Form.Item label="–ì–∞–ª–µ—Ä–µ—è (–¥–æ–ø. –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)">
                <Upload.Dragger
                  multiple
                  accept="image/*"
                  listType="picture-card"
                  fileList={galleryFileList}
                  beforeUpload={beforeUploadValidate}
                  onChange={({ fileList }) => setGalleryFileList(fileList)}
                >
                  <p className="ant-upload-drag-icon"><InboxOutlined /></p>
                  <p className="ant-upload-text">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</p>
                </Upload.Dragger>
              </Form.Item>
            </>
          )}
        </Form>
      </Modal>
    </div>
  );
};

export default ProductsPage;
