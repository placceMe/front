// src/pages/admin/ProductPageDetailModer.tsx
import React, { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import {
  Typography,
  Descriptions,
  Image,
  Button,
  Tag,
  message,
  Card,
  Row,
  Col,
  Space,
  Spin,
  Badge,
  Statistic,
  Avatar,
  Tooltip,
  Modal,
  Grid,
} from "antd";
import {
  ArrowLeftOutlined,
  CheckCircleTwoTone,
  StopTwoTone,
  InboxOutlined,
  DeleteOutlined,
  ReloadOutlined,
  EditOutlined,
  ExclamationCircleOutlined,
  InfoCircleOutlined,
  UserOutlined,
  TagsOutlined,
  PictureOutlined,
} from "@ant-design/icons";
import { useRequest } from "@shared/request/useRequest";

/** ===== –¢–∏–ø–∏ (—É–∑–≥–æ–¥–∂–µ–Ω—ñ –∑ –±–µ–∫–æ–º) ===== */
type ProductDetails = {
  id: string;
  title: string;
  description?: string;
  price: number;
  color?: string;
  weight?: number;
  mainImageUrl?: string;
  // –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –Ω–µ —Å—Ç—Ä–æ–∫–∞
  additionalImageUrls?: Array<{
    id: string;
    url: string;
    fileName?: string;
    size?: number;
    contentType?: string;
    productId?: string;
    createdAt?: string;
  }> | string[] | string;
  categoryId: string;
  category?: { id: string; name?: string; title?: string; } | null;
  sellerId?: string;
  quantity: number;
  state?: string;
  characteristics?: Array<{
    characteristicDictId: string;
    value: string;
    name?: string;
    characteristicDict?: { name?: string; code?: string; type?: string; };
  }>;
};

const API_PRODUCTS = "/api/products";


/** ===== –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫—É –ø—É—Ç–∏ ===== */
const coerceToPathString = (v: unknown): string => {
  if (typeof v === "string") return v;
  if (v && typeof v === "object") {
    const cand =
      (v as any).url ?? (v as any).href ?? (v as any).path ?? (v as any).value;
    if (typeof cand === "string") return cand;
  }
  return v == null ? "" : String(v);
};

/** ===== additionalImageUrls –º–æ–∂–µ—Ç –±—ã—Ç—å —á–µ–º —É–≥–æ–¥–Ω–æ: –¥–µ–ª–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ =====
const splitMaybeCommaList = (val: unknown): string[] => {
  if (!val) return [];
  if (Array.isArray(val)) {
    return val
      .map(coerceToPathString)
      .map((x) => x.trim())
      .filter(Boolean);
  }
  const s = coerceToPathString(val);
  if (!s) return [];
  // –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–ø—è—Ç—ã–º–∏
  return s
    .split(",")
    .map((x) => x.trim())
    .filter(Boolean);
};
 */
const splitMaybeCommaList = (val: unknown): string[] => {
  if (!val) return [];
  if (Array.isArray(val)) {
    // –£–∂–µ –º–∞—Å—Å–∏–≤ - –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    return val
      .map(coerceToPathString)
      .map((x) => x.trim())
      .filter(Boolean);
  }
  const s = coerceToPathString(val);
  if (!s) return [];
  // –°—Ç—Ä–æ–∫–∞ —Å –∑–∞–ø—è—Ç—ã–º–∏
  return s
    .split(",")
    .map((x) => x.trim())
    .filter(Boolean);
};

/** ===== –°—Ç–∞—Ç—É—Å-–±–µ–π–¥–∂ ===== */
const statusTag = (s?: string) => {
  switch (s) {
    case "Active":
      return <Tag color="green">–ê–∫—Ç–∏–≤–Ω–∏–π</Tag>;
    case "Blocked":
      return <Tag color="red">–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π</Tag>;
    case "Archived":
      return <Tag color="blue">–í –∞—Ä—Ö—ñ–≤—ñ</Tag>;
    case "Moderation":
      return <Tag color="gold">–ú–æ–¥–µ—Ä–∞—Ü—ñ—è</Tag>;
    case "Deleted":
      return <Tag>–í–∏–¥–∞–ª–µ–Ω–∏–π</Tag>;
    default:
      return <Tag>{s || "‚Äî"}</Tag>;
  }
};

const ProductModerationDetailsPage: React.FC = () => {
  const { id } = useParams<{ id: string; }>();
  const navigate = useNavigate();
  const { useBreakpoint } = Grid;
  const screens = useBreakpoint();

  const { request: requestProduct, loading: loadingProduct } = useRequest();
  const { request: requestDelete } = useRequest();
  const [loadingState, setLoadingState] = useState(false);

  // –î–æ–¥–∞—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
  const [modalVisible, setModalVisible] = useState(false);
  const [currentState, setCurrentState] = useState('');
  const [currentConfig, setCurrentConfig] = useState<any>(null);

  const [item, setItem] = useState<ProductDetails | null>(null);

  const fetchItem = async () => {
    if (!id) return;

    const loadingKey = `fetching-${Date.now()}`;

    try {
      // Show loading notification for slow connections
      const loadingTimeout = setTimeout(() => {
        message.loading({
          content: '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—É...',
          key: loadingKey,
          duration: 0
        });
      }, 500);

      const r = await requestProduct(`/api/products/${id}`);

      // Clear loading notification
      clearTimeout(loadingTimeout);
      message.destroy(loadingKey);

      if (!r.id) throw new Error(`–¢–æ–≤–∞—Ä –∑ ID ${id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);

      setItem(r);

      // Show success notification
      message.success({
        content: `–î–∞–Ω—ñ —Ç–æ–≤–∞—Ä—É "${r.title}" —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ`,
        duration: 2
      });

    } catch (error: any) {
      message.destroy(loadingKey);

      const errorMessage = error.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–æ–≤–∞—Ä";
      message.error({
        content: `–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${errorMessage}`,
        duration: 5
      });

      console.error('Fetch error:', error);
    }
  };

  useEffect(() => {
    console.log('Component mounted, id from params:', id);
    fetchItem();
  }, [id]);

  const changeState = async (state: string) => {

    // –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç - –ø–æ–∫–∞–∑—É—î–º–æ alert —â–æ–± –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è —â–æ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è

    if (!id) {
      console.error('No ID provided');
      return;
    }

    // Define state-specific messages and configurations
    const stateConfigs = {
      Active: {
        title: '‚úÖ –°—Ö–≤–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É',
        content: `–í–∏ –∑–±–∏—Ä–∞—î—Ç–µ—Å—è —Å—Ö–≤–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä "${item?.title}". –ü—ñ—Å–ª—è —Å—Ö–≤–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä —Å—Ç–∞–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–º –¥–ª—è –ø–æ–∫—É–ø—Ü—ñ–≤ —É –º–∞–≥–∞–∑–∏–Ω—ñ.`,
        successMessage: 'üéâ –¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ —Å—Ö–≤–∞–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä –≤—ñ–Ω –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø—Ü—ñ–≤.',
        okText: '–°—Ö–≤–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä',
        icon: <CheckCircleTwoTone twoToneColor="#52c41a" />,
        okType: 'primary' as const
      },
      Blocked: {
        title: 'üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É',
        content: `–í–∏ –∑–±–∏—Ä–∞—î—Ç–µ—Å—è –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä "${item?.title}". –ü—ñ—Å–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä –Ω–µ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø—Ü—ñ–≤.`,
        successMessage: '‚ö†Ô∏è –¢–æ–≤–∞—Ä –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ. –ü–æ–∫—É–ø—Ü—ñ –±—ñ–ª—å—à–µ –Ω–µ –º–æ–∂—É—Ç—å –π–æ–≥–æ –ø—Ä–∏–¥–±–∞—Ç–∏.',
        okText: '–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä',
        icon: <StopTwoTone twoToneColor="#ff4d4f" />,
        okType: 'danger' as const
      },
      Archived: {
        title: 'üì¶ –ê—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É',
        content: `–í–∏ –∑–±–∏—Ä–∞—î—Ç–µ—Å—è –∞—Ä—Ö—ñ–≤—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä "${item?.title}". –ê—Ä—Ö—ñ–≤–æ–≤–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –ø—Ä–∏—Ö–æ–≤—É—é—Ç—å—Å—è –≤—ñ–¥ –ø–æ–∫—É–ø—Ü—ñ–≤, –∞–ª–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º—ñ.`,
        successMessage: 'üì¶ –¢–æ–≤–∞—Ä –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –≤ –∞—Ä—Ö—ñ–≤. –ô–æ–≥–æ –º–æ–∂–Ω–∞ –±—É–¥–µ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ.',
        okText: '–ê—Ä—Ö—ñ–≤—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä',
        icon: <InboxOutlined />,
        okType: 'default' as const
      },
      Moderation: {
        title: '‚è≥ –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é',
        content: `–í–∏ –∑–±–∏—Ä–∞—î—Ç–µ—Å—è –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä "${item?.title}" –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é. –¢–æ–≤–∞—Ä –±—É–¥–µ –æ—á—ñ–∫—É–≤–∞—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ä–æ–∑–≥–ª—è–¥—É.`,
        successMessage: '‚è≥ –¢–æ–≤–∞—Ä –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é. –í—ñ–Ω –æ—á—ñ–∫—É—î –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ä–æ–∑–≥–ª—è–¥—É.',
        okText: '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é',
        icon: <ExclamationCircleOutlined />,
        okType: 'default' as const
      }
    };

    const config = stateConfigs[state as keyof typeof stateConfigs];
    if (!config) {
      message.error('–ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä—É');
      return;
    }

    console.log('About to show modal with config:', config);

    // –ó–∞–º—ñ—Å—Ç—å Modal.confirm –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ useState –ø—ñ–¥—Ö—ñ–¥
    setCurrentState(state);
    setCurrentConfig(config);
    setModalVisible(true);
  };

  const deleteProduct = async () => {
    console.log('deleteProduct called, id:', id, 'item:', item);

    if (!id || !item) {
      console.error('Missing id or item:', { id, item });
      return;
    }

    Modal.confirm({
      title: 'üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É',
      content: (
        <div style={{ marginTop: 16 }}>
          <Typography.Paragraph strong style={{ color: '#ff4d4f', marginBottom: 16 }}>
            ‚ö†Ô∏è –£–í–ê–ì–ê: –¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞!
          </Typography.Paragraph>
          <Typography.Paragraph style={{ marginBottom: 16 }}>
            –í–∏ –∑–±–∏—Ä–∞—î—Ç–µ—Å—è –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä "{item.title}" –∑ —Å–∏—Å—Ç–µ–º–∏.
            –í—Å—ñ –¥–∞–Ω—ñ, –≤–∫–ª—é—á–∞—é—á–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—é, –±—É–¥—É—Ç—å –≤—Ç—Ä–∞—á–µ–Ω—ñ –Ω–∞–∑–∞–≤–∂–¥–∏.
          </Typography.Paragraph>

          <div style={{
            padding: '16px',
            background: '#fff2f0',
            borderRadius: '6px',
            border: '1px solid #ffccc7'
          }}>
            <Typography.Text strong>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–æ–≤–∞—Ä:</Typography.Text>
            <br />
            <Typography.Text>ID: {item.id}</Typography.Text>
            <br />
            <Typography.Text>–ù–∞–∑–≤–∞: {item.title}</Typography.Text>
            <br />
            <Typography.Text>–°—Ç–∞—Ç—É—Å: {statusTag(item.state)}</Typography.Text>
            <br />
            <Typography.Text>–¶—ñ–Ω–∞: {item.price} ‚Ç¥</Typography.Text>
            <br />
            <Typography.Text>–ü—Ä–æ–¥–∞–≤–µ—Ü—å: {item.sellerId || '–ù–µ–≤—ñ–¥–æ–º–æ'}</Typography.Text>
          </div>

          <Typography.Paragraph style={{ marginTop: 16, marginBottom: 0 }}>
            <Typography.Text strong>
              –î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –Ω–∏–∂—á–µ:
            </Typography.Text>
          </Typography.Paragraph>
        </div>
      ),
      icon: <ExclamationCircleOutlined style={{ color: '#ff4d4f' }} />,
      okText: '–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–∑–∞–≤–∂–¥–∏',
      okType: 'danger',
      cancelText: '–°–∫–∞—Å—É–≤–∞—Ç–∏',
      width: 580,
      onOk: async () => {
        // Additional confirmation step
        return new Promise((resolve, reject) => {
          Modal.confirm({
            title: 'üîí –û—Å—Ç–∞—Ç–æ—á–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è',
            content: (
              <div style={{ textAlign: 'center', padding: '20px 0' }}>
                <Typography.Title level={4} style={{ color: '#ff4d4f' }}>
                  –û—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–Ω—Å –∑—É–ø–∏–Ω–∏—Ç–∏—Å—è!
                </Typography.Title>
                <Typography.Paragraph>
                  –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è", —â–æ–± –æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä.
                </Typography.Paragraph>
              </div>
            ),
            icon: <DeleteOutlined style={{ color: '#ff4d4f' }} />,
            okText: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è',
            okType: 'danger',
            cancelText: '–ù—ñ, –∑–∞–ª–∏—à–∏—Ç–∏ —Ç–æ–≤–∞—Ä',
            width: 450,
            onOk: async () => {
              setLoadingState(true);
              const loadingKey = `deleting-${Date.now()}`;

              // Show loading notification
              message.loading({
                content: `–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É "${item.title}"...`,
                key: loadingKey,
                duration: 0
              });

              try {
                const response = await requestDelete(`${API_PRODUCTS}/${id}`, {
                  method: "DELETE"
                });

                if (response && !response.error) {
                  // Hide loading and show success
                  message.success({
                    content: `üóëÔ∏è –¢–æ–≤–∞—Ä "${item.title}" —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —Å–∏—Å—Ç–µ–º–∏!`,
                    key: loadingKey,
                    duration: 5
                  });

                  // Additional notification
                  setTimeout(() => {
                    message.info({
                      content: '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤...',
                      duration: 2
                    });
                  }, 1000);

                  // Navigate back after a short delay
                  setTimeout(() => {
                    navigate("/admin/productsmoder");
                  }, 2000);

                } else {
                  throw new Error(response?.message || response?.error || '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
                }
              } catch (error: any) {
                message.error({
                  content: `–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É: ${error.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`,
                  key: loadingKey,
                  duration: 6
                });
                console.error('Delete error:', error);
              } finally {
                setLoadingState(false);
              }

              resolve(true);
            },
            onCancel: () => {
              message.info('–í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –¢–æ–≤–∞—Ä –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º—ñ.');
              reject(false);
            }
          });
        });
      },
    });
  };

  // Helper to normalize images array
  const getImagesArray = (images: any): Array<{ url: string; }> => {
    if (!images) return [];
    if (Array.isArray(images)) return images;
    if (typeof images === 'string') {
      return images.split(',').map(url => ({ url: url.trim() }));
    }
    return [];
  };

  const imagesArray = getImagesArray(item?.additionalImageUrls);

  console.log('Render: ProductModerationDetailsPage', { id, item, loadingProduct, loadingState });

  if (loadingProduct && !item) {
    return (
      <div style={{
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        minHeight: '50vh'
      }}>
        <Spin size="large" />
      </div>
    );
  }

  return (
    <div style={{ padding: '24px', maxWidth: '1400px', margin: '0 auto' }}>
      {/* Header Section */}
      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
        <Col xs={24} lg={16}>
          <Space direction="vertical" size="small" style={{ width: '100%' }}>
            <Button
              icon={<ArrowLeftOutlined />}
              onClick={() => navigate("/admin/productsmoder")}
              size="large"
            >
              –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Å–ø–∏—Å–∫—É
            </Button>

            <div style={{ display: 'flex', alignItems: 'center', gap: 16, flexWrap: 'wrap' }}>
              <Typography.Title level={2} style={{ margin: 0, flex: 1 }}>
                {item?.title || "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..."}
              </Typography.Title>
              {item && statusTag(item.state)}
            </div>
          </Space>
        </Col>

        <Col xs={24} lg={8} style={{ textAlign: screens.lg ? 'right' : 'left' }}>
          <Space wrap>
            <Tooltip title="–û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ">
              <Button
                icon={<ReloadOutlined />}
                onClick={fetchItem}
                loading={loadingProduct}
                size="large"
              />
            </Tooltip>
          </Space>
        </Col>
      </Row>

      {/* Status Information Alert */}
      {item && (
        <div style={{ marginBottom: 24 }}>
          {item.state === 'Moderation' && (
            <Card style={{ background: '#fffbe6', border: '1px solid #ffe58f' }}>
              <Row gutter={16} align="middle">
                <Col>
                  <ExclamationCircleOutlined style={{ fontSize: 24, color: '#faad14' }} />
                </Col>
                <Col flex={1}>
                  <Typography.Text strong style={{ color: '#d48806' }}>
                    –¢–æ–≤–∞—Ä –æ—á—ñ–∫—É—î –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
                  </Typography.Text>
                  <br />
                  <Typography.Text style={{ color: '#ad8b00' }}>
                    –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É –º–æ–¥–µ—Ä–∞—Ü—ñ—ó —Ü—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É
                  </Typography.Text>
                </Col>
              </Row>
            </Card>
          )}

          {item.state === 'Active' && (
            <Card style={{ background: '#f6ffed', border: '1px solid #b7eb8f' }}>
              <Row gutter={16} align="middle">
                <Col>
                  <CheckCircleTwoTone twoToneColor="#52c41a" style={{ fontSize: 24 }} />
                </Col>
                <Col flex={1}>
                  <Typography.Text strong style={{ color: '#389e0d' }}>
                    –¢–æ–≤–∞—Ä –∞–∫—Ç–∏–≤–Ω–∏–π —ñ –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø—Ü—ñ–≤
                  </Typography.Text>
                  <br />
                  <Typography.Text style={{ color: '#237804' }}>
                    –ü—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É –º–æ–¥–µ—Ä–∞—Ü—ñ—é
                  </Typography.Text>
                </Col>
              </Row>
            </Card>
          )}

          {item.state === 'Blocked' && (
            <Card style={{ background: '#fff2f0', border: '1px solid #ffccc7' }}>
              <Row gutter={16} align="middle">
                <Col>
                  <StopTwoTone twoToneColor="#ff4d4f" style={{ fontSize: 24 }} />
                </Col>
                <Col flex={1}>
                  <Typography.Text strong style={{ color: '#cf1322' }}>
                    –¢–æ–≤–∞—Ä –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ
                  </Typography.Text>
                  <br />
                  <Typography.Text style={{ color: '#a8071a' }}>
                    –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø—Ü—ñ–≤. –ú–æ–∂–Ω–∞ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∞–±–æ –∞—Ä—Ö—ñ–≤—É–≤–∞—Ç–∏
                  </Typography.Text>
                </Col>
              </Row>
            </Card>
          )}

          {item.state === 'Archived' && (
            <Card style={{ background: '#f0f5ff', border: '1px solid #adc6ff' }}>
              <Row gutter={16} align="middle">
                <Col>
                  <InboxOutlined style={{ fontSize: 24, color: '#1890ff' }} />
                </Col>
                <Col flex={1}>
                  <Typography.Text strong style={{ color: '#0050b3' }}>
                    –¢–æ–≤–∞—Ä –≤ –∞—Ä—Ö—ñ–≤—ñ
                  </Typography.Text>
                  <br />
                  <Typography.Text style={{ color: '#003a8c' }}>
                    –¢–æ–≤–∞—Ä –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π –≤—ñ–¥ –ø–æ–∫—É–ø—Ü—ñ–≤, –∞–ª–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—ñ
                  </Typography.Text>
                </Col>
              </Row>
            </Card>
          )}
        </div>
      )}

      {/* Action Buttons Section */}
      <Card
        title={
          <Space>
            <InfoCircleOutlined />
            –î—ñ—ó –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
          </Space>
        }
        style={{ marginBottom: 24 }}
        extra={
          <Badge
            count={item?.state === 'Moderation' ? '–û—á—ñ–∫—É—î' : '–û–±—Ä–æ–±–ª–µ–Ω–æ'}
            color={item?.state === 'Moderation' ? 'gold' : 'green'}
          />
        }
      >
        <Row gutter={[16, 16]}>
          {/* Primary Actions */}
          <Col xs={24} md={12} lg={6}>
            <Button
              type="primary"
              icon={<CheckCircleTwoTone twoToneColor="#52c41a" />}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                console.log('Approve button clicked');
                changeState("Active");
              }}
              loading={loadingState}
              disabled={item?.state === "Active"}
              block
              size="large"
              style={{ height: '56px', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}
            >
              <span style={{ fontWeight: 'bold' }}>–°—Ö–≤–∞–ª–∏—Ç–∏</span>
              <span style={{ fontSize: '11px', opacity: 0.8 }}>
                –ó—Ä–æ–±–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–º
              </span>
            </Button>
          </Col>

          <Col xs={24} md={12} lg={6}>
            <Button
              danger
              icon={<StopTwoTone twoToneColor="#ff4d4f" />}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                console.log('Block button clicked');
                changeState("Blocked");
              }}
              loading={loadingState}
              disabled={item?.state === "Blocked"}
              block
              size="large"
              style={{ height: '56px', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}
            >
              <span style={{ fontWeight: 'bold' }}>–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏</span>
              <span style={{ fontSize: '11px', opacity: 0.8 }}>
                –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –≤—ñ–¥ –ø–æ–∫—É–ø—Ü—ñ–≤
              </span>
            </Button>
          </Col>

          {/* Secondary Actions */}
          <Col xs={24} md={12} lg={6}>
            <Button
              icon={<ExclamationCircleOutlined />}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                console.log('Moderation button clicked');
                changeState("Moderation");
              }}
              loading={loadingState}
              disabled={item?.state === "Moderation"}
              block
              size="large"
              style={{ height: '56px', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}
            >
              <span style={{ fontWeight: 'bold' }}>–ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é</span>
              <span style={{ fontSize: '11px', opacity: 0.7 }}>
                –ü–æ–≤—Ç–æ—Ä–Ω–∏–π —Ä–æ–∑–≥–ª—è–¥
              </span>
            </Button>
          </Col>

          <Col xs={24} md={12} lg={6}>
            <Button
              icon={<InboxOutlined />}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                console.log('Archive button clicked');
                changeState("Archived");
              }}
              loading={loadingState}
              disabled={item?.state === "Archived"}
              block
              size="large"
              style={{ height: '56px', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}
            >
              <span style={{ fontWeight: 'bold' }}>–ê—Ä—Ö—ñ–≤—É–≤–∞—Ç–∏</span>
              <span style={{ fontSize: '11px', opacity: 0.7 }}>
                –ó–±–µ—Ä–µ–≥—Ç–∏ —è–∫ –∞—Ä—Ö—ñ–≤
              </span>
            </Button>
          </Col>
        </Row>

        {/* Danger Zone */}
        <div style={{
          marginTop: 24,
          padding: '20px',
          background: '#fff2f0',
          border: '1px solid #ffccc7',
          borderRadius: '8px'
        }}>
          <Row gutter={[16, 16]} align="middle">
            <Col xs={24} lg={16}>
              <Space direction="vertical" size="small">
                <Typography.Text strong style={{ color: '#ff4d4f' }}>
                  üö® –ù–µ–±–µ–∑–ø–µ—á–Ω–∞ –∑–æ–Ω–∞
                </Typography.Text>
                <Typography.Text style={{ color: '#ff4d4f' }}>
                  –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–µ. –í—Å—ñ –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –≤—Ç—Ä–∞—á–µ–Ω—ñ –Ω–∞–∑–∞–≤–∂–¥–∏.
                </Typography.Text>
              </Space>
            </Col>
            <Col xs={24} lg={8}>
              <Button
                danger
                type="dashed"
                icon={<DeleteOutlined />}
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  console.log('Delete button clicked');
                  deleteProduct();
                }}
                loading={loadingState}
                block
                size="large"
                style={{ height: '48px' }}
              >
                <strong>–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–∑–∞–≤–∂–¥–∏</strong>
              </Button>
            </Col>
          </Row>
        </div>
      </Card>

      <Row gutter={[24, 24]}>
        {/* Left Column - Images */}
        <Col xs={24} lg={12}>
          {/* Main Image Section */}
          <Card
            title={
              <Space>
                <PictureOutlined />
                –ì–æ–ª–æ–≤–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
              </Space>
            }
            style={{ marginBottom: 16 }}
          >
            {item?.mainImageUrl ? (
              <div style={{ textAlign: 'center' }}>
                <Image
                  width="100%"
                  height={300}
                  style={{
                    objectFit: 'cover',
                    borderRadius: '12px',
                    border: '2px solid #1890ff'
                  }}
                  src={`${__BASE_URL__}/api/files/${item.mainImageUrl}`}
                  alt="Main product image"
                  placeholder={
                    <div style={{
                      width: '100%',
                      height: 300,
                      background: '#f5f5f5',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      borderRadius: '12px'
                    }}>
                      <PictureOutlined style={{ fontSize: 48, color: '#bfbfbf' }} />
                    </div>
                  }
                  fallback="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100%25' height='300'%3E%3Crect width='100%25' height='100%25' fill='%23f5f5f5'/%3E%3Ctext x='50%25' y='50%25' dominant-baseline='middle' text-anchor='middle' fill='%23999' font-size='16'%3EMain Image Error%3C/text%3E%3C/svg%3E"
                />
                <Typography.Text type="secondary" style={{ display: 'block', marginTop: 8 }}>
                  –ì–æ–ª–æ–≤–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
                </Typography.Text>
              </div>
            ) : (
              <div style={{
                textAlign: 'center',
                padding: '60px',
                background: '#fafafa',
                borderRadius: '12px',
                border: '2px dashed #d9d9d9'
              }}>
                <PictureOutlined style={{ fontSize: 64, color: '#d9d9d9' }} />
                <Typography.Text type="secondary" style={{ display: 'block', marginTop: 12, fontSize: '16px' }}>
                  –ì–æ–ª–æ–≤–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î
                </Typography.Text>
              </div>
            )}
          </Card>

          {/* Additional Images Section */}
          <Card
            title={
              <Space>
                <PictureOutlined />
                –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó
              </Space>
            }
            extra={
              <Badge count={imagesArray.length} color="blue" />
            }
          >
            {imagesArray.length > 0 ? (
              <Image.PreviewGroup>
                <Row gutter={[8, 8]}>
                  {imagesArray.map((img, i) => (
                    <Col xs={12} sm={8} md={6} key={i}>
                      <Image
                        width="100%"
                        height={120}
                        style={{
                          objectFit: 'cover',
                          borderRadius: '8px',
                          border: '1px solid #f0f0f0'
                        }}
                        src={`${__BASE_URL__}/api/files/${img.url}`}
                        alt={`Product image ${i + 1}`}
                        placeholder={
                          <div style={{
                            width: '100%',
                            height: 120,
                            background: '#f5f5f5',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            borderRadius: '8px'
                          }}>
                            <PictureOutlined style={{ fontSize: 24, color: '#bfbfbf' }} />
                          </div>
                        }
                        fallback="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='120'%3E%3Crect width='100%25' height='100%25' fill='%23f5f5f5'/%3E%3Ctext x='50%25' y='50%25' dominant-baseline='middle' text-anchor='middle' fill='%23999' font-size='12'%3ENo image%3C/text%3E%3C/svg%3E"
                      />
                    </Col>
                  ))}
                </Row>
              </Image.PreviewGroup>
            ) : (
              <div style={{
                textAlign: 'center',
                padding: '40px',
                background: '#fafafa',
                borderRadius: '8px'
              }}>
                <PictureOutlined style={{ fontSize: 48, color: '#d9d9d9' }} />
                <Typography.Text type="secondary" style={{ display: 'block', marginTop: 8 }}>
                  –ù–µ–º–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å
                </Typography.Text>
              </div>
            )}
          </Card>
        </Col>

        {/* Right Column - Product Info */}
        <Col xs={24} lg={12}>
          <Space direction="vertical" size="large" style={{ width: '100%' }}>
            {/* Quick Stats */}
            <Card>
              <Row gutter={16}>
                <Col span={6}>
                  <Statistic
                    title="–¶—ñ–Ω–∞"
                    value={item?.price || 0}
                    suffix="‚Ç¥"
                    valueStyle={{ color: '#3f8600', fontSize: '18px' }}
                  />
                </Col>
                <Col span={6}>
                  <Statistic
                    title="–ö—ñ–ª—å–∫—ñ—Å—Ç—å"
                    value={item?.quantity || 0}
                    valueStyle={{ fontSize: '18px' }}
                  />
                </Col>
                <Col span={6}>
                  <Statistic
                    title="–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
                    value={1 + imagesArray.length}
                    suffix={`(${item?.mainImageUrl ? '1 –≥–æ–ª–æ–≤–Ω–µ' : '0 –≥–æ–ª–æ–≤–Ω–∏—Ö'} + ${imagesArray.length} –¥–æ–¥.)`}
                    valueStyle={{ fontSize: '16px', color: '#1890ff' }}
                  />
                </Col>
                <Col span={6}>
                  <Statistic
                    title="–°—Ç–∞—Ç—É—Å"
                    value=""
                    formatter={() => statusTag(item?.state)}
                  />
                </Col>
              </Row>
            </Card>

            {/* Basic Information */}
            <Card
              title={
                <Space>
                  <InfoCircleOutlined />
                  –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
                </Space>
              }
            >
              <Descriptions column={1} size="small">
                <Descriptions.Item
                  label={<strong>ID —Ç–æ–≤–∞—Ä—É</strong>}
                  labelStyle={{ width: '40%', textAlign: 'right' }}
                >
                  <Typography.Text code>{item?.id}</Typography.Text>
                </Descriptions.Item>
                <Descriptions.Item
                  label={<strong>–ù–∞–∑–≤–∞</strong>}
                  labelStyle={{ textAlign: 'right' }}
                >
                  {item?.title}
                </Descriptions.Item>
                <Descriptions.Item
                  label={<strong>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è</strong>}
                  labelStyle={{ textAlign: 'right' }}
                >
                  <Tag icon={<TagsOutlined />}>
                    {item?.category?.title || item?.category?.name || item?.categoryId || "‚Äî"}
                  </Tag>
                </Descriptions.Item>
                <Descriptions.Item
                  label={<strong>–ü—Ä–æ–¥–∞–≤–µ—Ü—å</strong>}
                  labelStyle={{ textAlign: 'right' }}
                >
                  <Space>
                    <Avatar size="small" icon={<UserOutlined />} />
                    {item?.sellerId || "‚Äî"}
                  </Space>
                </Descriptions.Item>
                <Descriptions.Item
                  label={<strong>–ö–æ–ª—ñ—Ä</strong>}
                  labelStyle={{ textAlign: 'right' }}
                >
                  {item?.color ? (
                    <Tag color="blue">{item.color}</Tag>
                  ) : "‚Äî"}
                </Descriptions.Item>
                <Descriptions.Item
                  label={<strong>–í–∞–≥–∞</strong>}
                  labelStyle={{ textAlign: 'right' }}
                >
                  {item?.weight ? `${item.weight} –≥` : "‚Äî"}
                </Descriptions.Item>
              </Descriptions>
            </Card>
          </Space>
        </Col>
      </Row>

      {/* Description Section */}
      {item?.description && (
        <Card
          title={
            <Space>
              <EditOutlined />
              –û–ø–∏—Å —Ç–æ–≤–∞—Ä—É
            </Space>
          }
          style={{ marginTop: 24 }}
        >
          <Typography.Paragraph style={{ fontSize: '14px', lineHeight: 1.6 }}>
            {item.description}
          </Typography.Paragraph>
        </Card>
      )}

      {/* Characteristics Section */}
      {item?.characteristics && item.characteristics.length > 0 && (
        <Card
          title={
            <Space>
              <TagsOutlined />
              –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            </Space>
          }
          style={{ marginTop: 24 }}
          extra={<Badge count={item.characteristics.length} color="green" />}
        >
          <Row gutter={[16, 16]}>
            {item.characteristics.map((c, idx) => {
              const label = c.characteristicDict?.name ||
                c.characteristicDict?.code ||
                c.characteristicDictId ||
                `–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ ${idx + 1}`;
              return (
                <Col xs={24} sm={12} lg={8} key={idx}>
                  <Card size="small" style={{ height: '100%' }}>
                    <Statistic
                      title={label}
                      value={c.value || "‚Äî"}
                      valueStyle={{ fontSize: '14px' }}
                    />
                  </Card>
                </Col>
              );
            })}
          </Row>
        </Card>
      )}

      {/* Technical Details */}
      <Card
        title={
          <Space>
            <InfoCircleOutlined />
            –¢–µ—Ö–Ω—ñ—á–Ω—ñ –¥–µ—Ç–∞–ª—ñ –∑–æ–±—Ä–∞–∂–µ–Ω—å
          </Space>
        }
        style={{ marginTop: 24 }}
      >
        <Row gutter={[24, 16]}>
          <Col xs={24} lg={12}>
            <Card size="small" title="–ì–æ–ª–æ–≤–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è">
              <Space direction="vertical" style={{ width: '100%' }}>
                <div style={{ textAlign: 'right' }}>
                  <strong>–°—Ç–∞—Ç—É—Å:</strong>{' '}
                  {item?.mainImageUrl ? (
                    <Tag color="green">–ù–∞—è–≤–Ω–µ</Tag>
                  ) : (
                    <Tag color="red">–í—ñ–¥—Å—É—Ç–Ω—î</Tag>
                  )}
                </div>
                {item?.mainImageUrl && (
                  <div style={{ textAlign: 'right' }}>
                    <strong>URL:</strong>
                    <br />
                    <Typography.Text code copyable style={{ fontSize: '11px' }}>
                      {coerceToPathString(item.mainImageUrl)}
                    </Typography.Text>
                  </div>
                )}
                {item?.mainImageUrl && (
                  <div style={{ textAlign: 'right' }}>
                    <strong>–ü–æ–≤–Ω–∏–π —à–ª—è—Ö:</strong>
                    <br />
                    <Typography.Text code copyable style={{ fontSize: '11px' }}>
                      {`${__BASE_URL__}/api/files/${item.mainImageUrl}`}
                    </Typography.Text>
                  </div>
                )}
              </Space>
            </Card>
          </Col>

          <Col xs={24} lg={12}>
            <Card size="small" title="–î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è">
              <Space direction="vertical" style={{ width: '100%' }}>
                <div style={{ textAlign: 'right' }}>
                  <strong>–ö—ñ–ª—å–∫—ñ—Å—Ç—å:</strong>{' '}
                  <Badge count={imagesArray.length} color="blue" />
                </div>
                {imagesArray.length > 0 && (
                  <div style={{ textAlign: 'right' }}>
                    <strong>URL —Å–ø–∏—Å–æ–∫:</strong>
                    <div style={{ maxHeight: '200px', overflowY: 'auto', marginTop: '8px' }}>
                      {splitMaybeCommaList(item?.additionalImageUrls).map((url, i) => (
                        <div key={i} style={{ marginBottom: '8px' }}>
                          <Typography.Text code copyable style={{ fontSize: '11px' }}>
                            {url}
                          </Typography.Text>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
                {imagesArray.length === 0 && (
                  <div style={{ textAlign: 'right' }}>
                    <Typography.Text type="secondary">
                      –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ
                    </Typography.Text>
                  </div>
                )}
              </Space>
            </Card>
          </Col>
        </Row>
      </Card>

      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É */}
      <Modal
        title={currentConfig?.title}
        open={modalVisible}
        onOk={async () => {
          console.log('Modal onOk clicked');
          setLoadingState(true);
          const loadingKey = `updating-${Date.now()}`;

          // Show loading notification
          message.loading({
            content: `–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ç–æ–≤–∞—Ä—É...`,
            key: loadingKey,
            duration: 0
          });

          try {
            console.log(`${API_PRODUCTS}/${id}/state`);
            const response = await requestProduct(`${API_PRODUCTS}/${id}/state`, {
              method: "PUT",
              body: JSON.stringify({ state: currentState }),
            });

            if (response && !response.error) {
              // Hide loading and show success
              message.success({
                content: currentConfig?.successMessage,
                key: loadingKey,
                duration: 4
              });

              // Refresh item data
              await fetchItem();

              // Show additional info notification
              setTimeout(() => {
                message.info({
                  content: `–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä—É –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ "${item?.state}" –Ω–∞ "${currentState}"`,
                  duration: 3
                });
              }, 500);

            } else {
              throw new Error(response?.message || response?.error || '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }
          } catch (error: any) {
            message.error({
              content: `–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É: ${error.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`,
              key: loadingKey,
              duration: 5
            });
            console.error('State change error:', error);
          } finally {
            setLoadingState(false);
            setModalVisible(false);
          }
        }}
        onCancel={() => {
          console.log('Modal cancelled');
          setModalVisible(false);
        }}
        okText={currentConfig?.okText}
        cancelText='–°–∫–∞—Å—É–≤–∞—Ç–∏'
        width={520}
        confirmLoading={loadingState}
      >
        <div style={{ marginTop: 16 }}>
          <Typography.Paragraph style={{ marginBottom: 16 }}>
            {currentConfig?.content}
          </Typography.Paragraph>
          <div style={{
            padding: '12px',
            background: '#f8f9fa',
            borderRadius: '6px',
            border: '1px solid #e9ecef'
          }}>
            <Typography.Text strong>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–æ–≤–∞—Ä:</Typography.Text>
            <br />
            <Typography.Text>ID: {item?.id}</Typography.Text>
            <br />
            <Typography.Text>–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {item?.state || '–ù–µ–≤—ñ–¥–æ–º–æ'}</Typography.Text>
            <br />
            <Typography.Text>–ü—Ä–æ–¥–∞–≤–µ—Ü—å: {item?.sellerId || '–ù–µ–≤—ñ–¥–æ–º–æ'}</Typography.Text>
          </div>
        </div>
      </Modal>

    </div>
  );
};

export default ProductModerationDetailsPage;
